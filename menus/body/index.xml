<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Body on juliewoolie Docs</title><link>/menus/body/</link><description>Recent content in Body on juliewoolie Docs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/menus/body/index.xml" rel="self" type="application/rss+xml"/><item><title>&lt;button> element</title><link>/menus/body/button/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/body/button/</guid><description>Attributes Attribute Value Description Example action string Action for the button to perform when clicked action=&amp;quot;cmd: tp %player% 0 100 0&amp;quot; action-trigger string Specifies whether left or right clicking
triggers the action attribute.
&amp;quot;left&amp;quot; by default. action-trigger=&amp;quot;right&amp;quot; enabled boolean Disables / enables the button enabled=&amp;quot;false&amp;quot; Action attribute Makes the button element to perform an action when clicked.
Action Description Example close Closes the menu close cmd: &amp;lt;command&amp;gt; Executes a command as console.</description></item><item><title>&lt;canvas> element</title><link>/menus/body/canvas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/body/canvas/</guid><description>Attributes Attribute Value Description Example width integer Width of the canvas, if not set, defaults to 16 width=16 height integer Height of the canvas, if not set, defaults to 16 height=16 Modifying the Canvas Currently, a &amp;lt;canvas&amp;gt; element can only be modified through the Java or JS APIs. Here is a quick example of how to do so:
index.xml script.js &amp;lt;delphi&amp;gt; &amp;lt;head&amp;gt; &amp;lt;script defer src=&amp;#34;script.js&amp;#34;/&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;canvas id=&amp;#34;canvas&amp;#34; width=&amp;#34;64&amp;#34; height=&amp;#34;64&amp;#34;/&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/delphi&amp;gt; const canvas = document.</description></item><item><title>&lt;chat-component> element</title><link>/menus/body/chat-component/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/body/chat-component/</guid><description>This element lets you use a JSON text component for text content on a page.
Note At time of writing, only vanilla english translations are supported, non-vanilla or non-english messages may be rendered incorrectly with incorrect sizes. Attributes Attribute Value Description Example src path Path to a text or JSON file that contains the component&amp;rsquo;s contents. src=&amp;quot;./text.json&amp;quot; type string Format the text is stored in. Supported values: json, minimessage. type=&amp;quot;json&amp;quot; Default Styling // None Examples &amp;lt;chat-component&amp;gt; {&amp;#34;text&amp;#34;: &amp;#34;Hello, world!</description></item><item><title>&lt;input/> element</title><link>/menus/body/input/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/body/input/</guid><description>Input elements take input from players
Attributes Attribute Value Description Example type input type An input type, changes how the input is displayed and validated. type=&amp;quot;number&amp;quot; placeholder string Placeholder text when no input has been given. placeholder=&amp;quot;Enter name...&amp;quot; enabled boolean Whether the element is disabled or not.
true by default enabled=&amp;quot;false&amp;quot; prompt string When clicked, this prompt is shown to a player to tell them to input text prompt=&amp;quot;Type your password&amp;quot; type Attribute Value Description Input example text (Default) Regular text input, no validation or rendering changes are applied Hello, world!</description></item><item><title>&lt;item/> element</title><link>/menus/body/item/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/body/item/</guid><description>Displays an item on the menu. This element cannot have child elements.
The displayed item can be set with either the src attribute or by writing the item data JSON inside the element.
Attributes Attribute Value Description Example src path A Resource Path to the item&amp;rsquo;s data. src=&amp;quot;item.json&amp;quot; hide-item-tooltip boolean Whether to show the item&amp;rsquo;s tooltip or
not when the element is hovered over.
true by default hide-item-tooltip=&amp;quot;true&amp;quot; advanced-item-tooltips boolean Whether to show the item tooltip</description></item><item><title>Minimessage elements</title><link>/menus/body/minimessage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/body/minimessage/</guid><description>Delphi includes support for a number of tags that aim to replicate the styling of minimessage text.
This means that &amp;lt;yellow&amp;gt;Hello, &amp;lt;bold&amp;gt;world&amp;lt;/bold&amp;gt;!&amp;lt;/yellow&amp;gt; is valid and will render correctly in Delphi menus.
List of supported tags &amp;lt;black&amp;gt; &amp;lt;dark_blue&amp;gt; &amp;lt;dark-blue&amp;gt; &amp;lt;dark_green&amp;gt; &amp;lt;dark-green&amp;gt; &amp;lt;dark_aqua&amp;gt; &amp;lt;dark-aqua&amp;gt; &amp;lt;dark_red&amp;gt; &amp;lt;dark-red&amp;gt; &amp;lt;dark_purple&amp;gt; &amp;lt;dark-purple&amp;gt; &amp;lt;gold&amp;gt; &amp;lt;gray&amp;gt; &amp;lt;grey&amp;gt; &amp;lt;dark_gray&amp;gt; &amp;lt;dark_grey&amp;gt; &amp;lt;dark-gray&amp;gt; &amp;lt;dark-grey&amp;gt; &amp;lt;blue&amp;gt; &amp;lt;green&amp;gt; &amp;lt;aqua&amp;gt; &amp;lt;red&amp;gt; &amp;lt;light_purple&amp;gt; &amp;lt;light-purple&amp;gt; &amp;lt;purple&amp;gt; &amp;lt;yellow&amp;gt; &amp;lt;white&amp;gt; Limits Some tags used by the Minimessage format are not possible to support in XML, such as the &amp;lt;gradient&amp;gt; tag in Minimessage.</description></item><item><title>Text Decoration Elements</title><link>/menus/body/text-deco/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/menus/body/text-deco/</guid><description>Text decoration elements allow for quicker, easier styling of text with elements.
Bold styling: &amp;lt;b&amp;gt; &amp;lt;bold&amp;gt; &amp;lt;strong&amp;gt; Italic styling: &amp;lt;i&amp;gt; &amp;lt;italic&amp;gt; &amp;lt;em&amp;gt; Underlined styling: &amp;lt;u&amp;gt; &amp;lt;underlined&amp;gt; Strikethrough styling: &amp;lt;st&amp;gt; &amp;lt;strikethrough&amp;gt; Obfuscated styling: &amp;lt;obf&amp;gt; &amp;lt;obfuscated&amp;gt;</description></item></channel></rss>